{"remainingRequest":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/entities/veicolo/veicolo.service.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/entities/veicolo/veicolo.service.ts","mtime":1542193084563},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/cache-loader/dist/cjs.js","mtime":1542190337092},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js","mtime":1542190335928},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar VeicoloService = /** @class */ (function () {\n    function VeicoloService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/veicolos';\n    }\n    VeicoloService.prototype.create = function (veicolo) {\n        var _this = this;\n        var copy = this.convertDateFromClient(veicolo);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    VeicoloService.prototype.update = function (veicolo) {\n        var _this = this;\n        var copy = this.convertDateFromClient(veicolo);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    VeicoloService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    VeicoloService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    VeicoloService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    VeicoloService.prototype.convertDateFromClient = function (veicolo) {\n        var copy = Object.assign({}, veicolo, {\n            dataValidazione: veicolo.dataValidazione != null && veicolo.dataValidazione.isValid() ? veicolo.dataValidazione.toJSON() : null\n        });\n        return copy;\n    };\n    VeicoloService.prototype.convertDateFromServer = function (res) {\n        res.body.dataValidazione = res.body.dataValidazione != null ? moment(res.body.dataValidazione) : null;\n        return res;\n    };\n    VeicoloService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (veicolo) {\n            veicolo.dataValidazione = veicolo.dataValidazione != null ? moment(veicolo.dataValidazione) : null;\n        });\n        return res;\n    };\n    VeicoloService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], VeicoloService);\n    return VeicoloService;\n    var _a;\n}());\nexports.VeicoloService = VeicoloService;\n",{"version":3,"file":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/entities/veicolo/veicolo.service.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/entities/veicolo/veicolo.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAgE;AAEhE,+BAAiC;AAEjC,4CAAqC;AAErC,mDAAmD;AACnD,qCAAiD;AAOjD;IAGI,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,gBAAW,GAAG,8BAAc,GAAG,cAAc,CAAC;IAEf,CAAC;IAExC,+BAAM,GAAN,UAAO,OAAiB;QAAxB,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,IAAI,CAAW,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAC/D,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,+BAAM,GAAN,UAAO,OAAiB;QAAxB,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAW,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAC9D,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,6BAAI,GAAJ,UAAK,EAAU;QAAf,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAc,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aACnE,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,8BAAK,GAAL,UAAM,GAAS;QAAf,iBAKC;QAJG,IAAM,OAAO,GAAG,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI;aACX,GAAG,CAAa,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAC3E,IAAI,CAAC,eAAG,CAAC,UAAC,GAA4B,IAAK,OAAA,KAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;IAC3F,CAAC;IAED,+BAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAS,IAAI,CAAC,WAAW,SAAI,EAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACvF,CAAC;IAEO,8CAAqB,GAA7B,UAA8B,OAAiB;QAC3C,IAAM,IAAI,GAAa,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE;YAC9C,eAAe,EAAE,OAAO,CAAC,eAAe,IAAI,IAAI,IAAI,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI;SAClI,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,8CAAqB,GAA7B,UAA8B,GAAuB;QACjD,GAAG,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACtG,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEO,mDAA0B,GAAlC,UAAmC,GAA4B;QAC3D,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,OAAiB;YAC/B,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACvG,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IArDQ,cAAc;QAD1B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAIL,iBAAU,oBAAV,iBAAU;OAH3B,cAAc,CAsD1B;IAAD,qBAAC;;CAAA,AAtDD,IAsDC;AAtDY,wCAAc","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { IVeicolo } from 'app/shared/model/veicolo.model';\n\ntype EntityResponseType = HttpResponse<IVeicolo>;\ntype EntityArrayResponseType = HttpResponse<IVeicolo[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class VeicoloService {\n    private resourceUrl = SERVER_API_URL + 'api/veicolos';\n\n    constructor(private http: HttpClient) {}\n\n    create(veicolo: IVeicolo): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(veicolo);\n        return this.http\n            .post<IVeicolo>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(veicolo: IVeicolo): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(veicolo);\n        return this.http\n            .put<IVeicolo>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<IVeicolo>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<IVeicolo[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    private convertDateFromClient(veicolo: IVeicolo): IVeicolo {\n        const copy: IVeicolo = Object.assign({}, veicolo, {\n            dataValidazione: veicolo.dataValidazione != null && veicolo.dataValidazione.isValid() ? veicolo.dataValidazione.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.dataValidazione = res.body.dataValidazione != null ? moment(res.body.dataValidazione) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((veicolo: IVeicolo) => {\n            veicolo.dataValidazione = veicolo.dataValidazione != null ? moment(veicolo.dataValidazione) : null;\n        });\n        return res;\n    }\n}\n"]}]}