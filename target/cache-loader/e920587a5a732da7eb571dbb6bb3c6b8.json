{"remainingRequest":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/core/auth/state-storage.service.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/core/auth/state-storage.service.ts","mtime":1542190288798},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/cache-loader/dist/cjs.js","mtime":1542190337092},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js","mtime":1542190335928},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\nvar StateStorageService = /** @class */ (function () {\n    function StateStorageService($sessionStorage) {\n        this.$sessionStorage = $sessionStorage;\n    }\n    StateStorageService.prototype.getPreviousState = function () {\n        return this.$sessionStorage.retrieve('previousState');\n    };\n    StateStorageService.prototype.resetPreviousState = function () {\n        this.$sessionStorage.clear('previousState');\n    };\n    StateStorageService.prototype.storePreviousState = function (previousStateName, previousStateParams) {\n        var previousState = { name: previousStateName, params: previousStateParams };\n        this.$sessionStorage.store('previousState', previousState);\n    };\n    StateStorageService.prototype.getDestinationState = function () {\n        return this.$sessionStorage.retrieve('destinationState');\n    };\n    StateStorageService.prototype.storeUrl = function (url) {\n        this.$sessionStorage.store('previousUrl', url);\n    };\n    StateStorageService.prototype.getUrl = function () {\n        return this.$sessionStorage.retrieve('previousUrl');\n    };\n    StateStorageService.prototype.storeDestinationState = function (destinationState, destinationStateParams, fromState) {\n        var destinationInfo = {\n            destination: {\n                name: destinationState.name,\n                data: destinationState.data\n            },\n            params: destinationStateParams,\n            from: {\n                name: fromState.name\n            }\n        };\n        this.$sessionStorage.store('destinationState', destinationInfo);\n    };\n    StateStorageService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" && _a || Object])\n    ], StateStorageService);\n    return StateStorageService;\n    var _a;\n}());\nexports.StateStorageService = StateStorageService;\n",{"version":3,"file":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/core/auth/state-storage.service.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/core/auth/state-storage.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,iDAAuD;AAGvD;IACI,6BAAoB,eAAsC;QAAtC,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAE9D,8CAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IAC1D,CAAC;IAED,gDAAkB,GAAlB;QACI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAChD,CAAC;IAED,gDAAkB,GAAlB,UAAmB,iBAAiB,EAAE,mBAAmB;QACrD,IAAM,aAAa,GAAG,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC;QAC/E,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAC/D,CAAC;IAED,iDAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IAC7D,CAAC;IAED,sCAAQ,GAAR,UAAS,GAAW;QAChB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IAED,oCAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAED,mDAAqB,GAArB,UAAsB,gBAAgB,EAAE,sBAAsB,EAAE,SAAS;QACrE,IAAM,eAAe,GAAG;YACpB,WAAW,EAAE;gBACT,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,IAAI,EAAE,gBAAgB,CAAC,IAAI;aAC9B;YACD,MAAM,EAAE,sBAAsB;YAC9B,IAAI,EAAE;gBACF,IAAI,EAAE,SAAS,CAAC,IAAI;aACvB;SACJ,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IAxCQ,mBAAmB;QAD/B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAEM,sCAAqB,oBAArB,sCAAqB;OADjD,mBAAmB,CAyC/B;IAAD,0BAAC;;CAAA,AAzCD,IAyCC;AAzCY,kDAAmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable({ providedIn: 'root' })\nexport class StateStorageService {\n    constructor(private $sessionStorage: SessionStorageService) {}\n\n    getPreviousState() {\n        return this.$sessionStorage.retrieve('previousState');\n    }\n\n    resetPreviousState() {\n        this.$sessionStorage.clear('previousState');\n    }\n\n    storePreviousState(previousStateName, previousStateParams) {\n        const previousState = { name: previousStateName, params: previousStateParams };\n        this.$sessionStorage.store('previousState', previousState);\n    }\n\n    getDestinationState() {\n        return this.$sessionStorage.retrieve('destinationState');\n    }\n\n    storeUrl(url: string) {\n        this.$sessionStorage.store('previousUrl', url);\n    }\n\n    getUrl() {\n        return this.$sessionStorage.retrieve('previousUrl');\n    }\n\n    storeDestinationState(destinationState, destinationStateParams, fromState) {\n        const destinationInfo = {\n            destination: {\n                name: destinationState.name,\n                data: destinationState.data\n            },\n            params: destinationStateParams,\n            from: {\n                name: fromState.name\n            }\n        };\n        this.$sessionStorage.store('destinationState', destinationInfo);\n    }\n}\n"]}]}