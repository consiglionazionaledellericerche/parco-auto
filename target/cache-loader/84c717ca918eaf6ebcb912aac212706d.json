{"remainingRequest":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/audits/audits.service.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/audits/audits.service.ts","mtime":1542190288534},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/cache-loader/dist/cjs.js","mtime":1542190337092},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js","mtime":1542190335928},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar shared_1 = require(\"app/shared\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar AuditsService = /** @class */ (function () {\n    function AuditsService(http) {\n        this.http = http;\n    }\n    AuditsService.prototype.query = function (req) {\n        var params = shared_1.createRequestOption(req);\n        params.set('fromDate', req.fromDate);\n        params.set('toDate', req.toDate);\n        var requestURL = app_constants_1.SERVER_API_URL + 'management/audits';\n        return this.http.get(requestURL, {\n            params: params,\n            observe: 'response'\n        });\n    };\n    AuditsService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], AuditsService);\n    return AuditsService;\n    var _a;\n}());\nexports.AuditsService = AuditsService;\n",{"version":3,"file":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/audits/audits.service.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/audits/audits.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAA4E;AAG5E,qCAAiD;AACjD,mDAAmD;AAInD;IACI,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,6BAAK,GAAL,UAAM,GAAQ;QACV,IAAM,MAAM,GAAe,4BAAmB,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QAEjC,IAAM,UAAU,GAAG,8BAAc,GAAG,mBAAmB,CAAC;QAExD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,UAAU,EAAE;YACtC,MAAM,QAAA;YACN,OAAO,EAAE,UAAU;SACtB,CAAC,CAAC;IACP,CAAC;IAdQ,aAAa;QADzB,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAEL,iBAAU,oBAAV,iBAAU;OAD3B,aAAa,CAezB;IAAD,oBAAC;;CAAA,AAfD,IAeC;AAfY,sCAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { createRequestOption } from 'app/shared';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Audit } from './audit.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AuditsService {\n    constructor(private http: HttpClient) {}\n\n    query(req: any): Observable<HttpResponse<Audit[]>> {\n        const params: HttpParams = createRequestOption(req);\n        params.set('fromDate', req.fromDate);\n        params.set('toDate', req.toDate);\n\n        const requestURL = SERVER_API_URL + 'management/audits';\n\n        return this.http.get<Audit[]>(requestURL, {\n            params,\n            observe: 'response'\n        });\n    }\n}\n"]}]}