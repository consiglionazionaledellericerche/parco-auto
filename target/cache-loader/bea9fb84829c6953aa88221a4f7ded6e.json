{"remainingRequest":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/health/health.service.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/health/health.service.ts","mtime":1542190288409},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/cache-loader/dist/cjs.js","mtime":1542190337092},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js","mtime":1542190335928},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar JhiHealthService = /** @class */ (function () {\n    function JhiHealthService(http) {\n        this.http = http;\n        this.separator = '.';\n    }\n    JhiHealthService.prototype.checkHealth = function () {\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/health');\n    };\n    JhiHealthService.prototype.transformHealthData = function (data) {\n        var response = [];\n        this.flattenHealthData(response, null, data.details);\n        return response;\n    };\n    JhiHealthService.prototype.getBaseName = function (name) {\n        if (name) {\n            var split = name.split('.');\n            return split[0];\n        }\n    };\n    JhiHealthService.prototype.getSubSystemName = function (name) {\n        if (name) {\n            var split = name.split('.');\n            split.splice(0, 1);\n            var remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    };\n    /* private methods */\n    JhiHealthService.prototype.addHealthObject = function (result, isLeaf, healthObject, name) {\n        var healthData = {\n            name: name\n        };\n        var details = {};\n        var hasDetails = false;\n        for (var key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                var value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                }\n                else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    };\n    JhiHealthService.prototype.flattenHealthData = function (result, path, data) {\n        for (var key in data) {\n            if (data.hasOwnProperty(key)) {\n                var value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    }\n                    else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    JhiHealthService.prototype.getModuleName = function (path, name) {\n        var result;\n        if (path && name) {\n            result = path + this.separator + name;\n        }\n        else if (path) {\n            result = path;\n        }\n        else if (name) {\n            result = name;\n        }\n        else {\n            result = '';\n        }\n        return result;\n    };\n    JhiHealthService.prototype.hasSubSystem = function (healthObject) {\n        var result = false;\n        for (var key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                var value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    };\n    JhiHealthService.prototype.isHealthObject = function (healthObject) {\n        var result = false;\n        for (var key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    };\n    JhiHealthService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], JhiHealthService);\n    return JhiHealthService;\n    var _a;\n}());\nexports.JhiHealthService = JhiHealthService;\n",{"version":3,"file":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/health/health.service.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/admin/health/health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiHealthService {\n    separator: string;\n\n    constructor(private http: HttpClient) {\n        this.separator = '.';\n    }\n\n    checkHealth(): Observable<any> {\n        return this.http.get(SERVER_API_URL + 'management/health');\n    }\n\n    transformHealthData(data): any {\n        const response = [];\n        this.flattenHealthData(response, null, data.details);\n        return response;\n    }\n\n    getBaseName(name): string {\n        if (name) {\n            const split = name.split('.');\n            return split[0];\n        }\n    }\n\n    getSubSystemName(name): string {\n        if (name) {\n            const split = name.split('.');\n            split.splice(0, 1);\n            const remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n\n    /* private methods */\n    private addHealthObject(result, isLeaf, healthObject, name): any {\n        const healthData: any = {\n            name\n        };\n\n        const details = {};\n        let hasDetails = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n\n    private flattenHealthData(result, path, data): any {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    } else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private getModuleName(path, name): string {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        } else if (path) {\n            result = path;\n        } else if (name) {\n            result = name;\n        } else {\n            result = '';\n        }\n        return result;\n    }\n\n    private hasSubSystem(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    private isHealthObject(healthObject): boolean {\n        let result = false;\n\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === 'status') {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n}\n"]}]}