{"remainingRequest":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","mtime":1542190287836},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/cache-loader/dist/cjs.js","mtime":1542190337092},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/thread-loader/dist/cjs.js","mtime":1542190335928},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar http_1 = require(\"@angular/common/http\");\nvar operators_1 = require(\"rxjs/operators\");\nvar login_service_1 = require(\"app/core/login/login.service\");\nvar AuthExpiredInterceptor = /** @class */ (function () {\n    function AuthExpiredInterceptor(injector) {\n        this.injector = injector;\n    }\n    AuthExpiredInterceptor.prototype.intercept = function (request, next) {\n        var _this = this;\n        return next.handle(request).pipe(operators_1.tap(function (event) { }, function (err) {\n            if (err instanceof http_1.HttpErrorResponse) {\n                if (err.status === 401) {\n                    var loginService = _this.injector.get(login_service_1.LoginService);\n                    loginService.logout();\n                }\n            }\n        }));\n    };\n    return AuthExpiredInterceptor;\n}());\nexports.AuthExpiredInterceptor = AuthExpiredInterceptor;\n",{"version":3,"file":"/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/git/parco-auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/git/parco-auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/git/parco-auto/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts"],"names":[],"mappings":";;AACA,6CAA+G;AAE/G,4CAAqC;AACrC,8DAA4D;AAE5D;IACI,gCAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAG,CAAC;IAE1C,0CAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAcC;QAbG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5B,eAAG,CACC,UAAC,KAAqB,IAAM,CAAC,EAC7B,UAAC,GAAQ;YACL,EAAE,CAAC,CAAC,GAAG,YAAY,wBAAiB,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;oBACrB,IAAM,YAAY,GAAiB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,4BAAY,CAAC,CAAC;oBACnE,YAAY,CAAC,MAAM,EAAE,CAAC;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC,CACJ,CACJ,CAAC;IACN,CAAC;IACL,6BAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,wDAAsB","sourcesContent":["import { Injector } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { LoginService } from 'app/core/login/login.service';\n\nexport class AuthExpiredInterceptor implements HttpInterceptor {\n    constructor(private injector: Injector) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(\n            tap(\n                (event: HttpEvent<any>) => {},\n                (err: any) => {\n                    if (err instanceof HttpErrorResponse) {\n                        if (err.status === 401) {\n                            const loginService: LoginService = this.injector.get(LoginService);\n                            loginService.logout();\n                        }\n                    }\n                }\n            )\n        );\n    }\n}\n"]}]}