{"remainingRequest":"/Users/valeriodiego/Documents/auto/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/valeriodiego/Documents/auto/node_modules/ts-loader/index.js??ref--9-3!/Users/valeriodiego/Documents/auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/auto/src/main/webapp/app/admin/configuration/configuration.service.ts","dependencies":[{"path":"/Users/valeriodiego/Documents/auto/src/main/webapp/app/admin/configuration/configuration.service.ts","mtime":1538729462000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/cache-loader/dist/cjs.js","mtime":1538729485000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/thread-loader/dist/cjs.js","mtime":1538729484000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/valeriodiego/Documents/auto/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar JhiConfigurationService = /** @class */ (function () {\n    function JhiConfigurationService(http) {\n        this.http = http;\n    }\n    JhiConfigurationService.prototype.get = function () {\n        var _this = this;\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(operators_1.map(function (res) {\n            var properties = [];\n            var propertiesObject = _this.getConfigPropertiesObjects(res.body);\n            for (var key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n            return properties.sort(function (propertyA, propertyB) {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        }));\n    };\n    JhiConfigurationService.prototype.getConfigPropertiesObjects = function (res) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (var key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is baseName\n                // For microservice, it is baseName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // by default, use the default ApplicationContext Id\n        return res['contexts']['auto']['beans'];\n    };\n    JhiConfigurationService.prototype.getEnv = function () {\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(operators_1.map(function (res) {\n            var properties = {};\n            var propertySources = res.body['propertySources'];\n            for (var _i = 0, propertySources_1 = propertySources; _i < propertySources_1.length; _i++) {\n                var propertyObject = propertySources_1[_i];\n                var name = propertyObject['name'];\n                var detailProperties = propertyObject['properties'];\n                var vals = [];\n                for (var keyDetail in detailProperties) {\n                    if (detailProperties.hasOwnProperty(keyDetail)) {\n                        vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                    }\n                }\n                properties[name] = vals;\n            }\n            return properties;\n        }));\n    };\n    JhiConfigurationService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], JhiConfigurationService);\n    return JhiConfigurationService;\n    var _a;\n}());\nexports.JhiConfigurationService = JhiConfigurationService;\n",{"version":3,"file":"/Users/valeriodiego/Documents/auto/src/main/webapp/app/admin/configuration/configuration.service.ts","sourceRoot":"","sources":["/Users/valeriodiego/Documents/auto/node_modules/angular-router-loader/src/index.js!/Users/valeriodiego/Documents/auto/node_modules/tslint-loader/index.js!/Users/valeriodiego/Documents/auto/src/main/webapp/app/admin/configuration/configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiConfigurationService {\n    constructor(private http: HttpClient) {}\n\n    get(): Observable<any> {\n        return this.http.get(SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(\n            map((res: HttpResponse<any>) => {\n                const properties: any[] = [];\n                const propertiesObject = this.getConfigPropertiesObjects(res.body);\n                for (const key in propertiesObject) {\n                    if (propertiesObject.hasOwnProperty(key)) {\n                        properties.push(propertiesObject[key]);\n                    }\n                }\n\n                return properties.sort((propertyA, propertyB) => {\n                    return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n                });\n            })\n        );\n    }\n\n    getConfigPropertiesObjects(res: Object) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (const key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is baseName\n                // For microservice, it is baseName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // by default, use the default ApplicationContext Id\n        return res['contexts']['auto']['beans'];\n    }\n\n    getEnv(): Observable<any> {\n        return this.http.get(SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(\n            map((res: HttpResponse<any>) => {\n                const properties: any = {};\n                const propertySources = res.body['propertySources'];\n\n                for (const propertyObject of propertySources) {\n                    const name = propertyObject['name'];\n                    const detailProperties = propertyObject['properties'];\n                    const vals: any[] = [];\n                    for (const keyDetail in detailProperties) {\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                        }\n                    }\n                    properties[name] = vals;\n                }\n                return properties;\n            })\n        );\n    }\n}\n"]}]}